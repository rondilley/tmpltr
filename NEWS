Version 0.1 (September 17, 2011):

* First public release.

Version 0.3 (Septemeber 23, 2011):

* Added support to load templates to ignore
* Added support to write discovered templates to file

Version 0.4 (November 12, 2011):

* Added faux clustering to improve readability of emplate output
* Added "greedy" parsing which ignores quotes

Version 0.5 (January 17, 2012):

* Added option to read from STDIN

Version 0.6 (December 28, 2013):

* Added IPv4, IPv6, MAC and HEX parsing

Version 0.7 (January 19, 2014):

* Added display of lines based on template matching

Version 0.8 (December 29, 2018):

* Added backend code to support log chains
* Fixed minor bugs

version 0.9 (January 14, 2021):

* Added optimizations and improved performance
* Removed log chaining stubs

version 0.11 (April 4, 2021):

* Ported to FreeBSD 12.2

version 0.12 (April 29, 2021):

* Updated hash functions to use binary insert sort on matching keys
* Fixed minor bugs

Version 0.13 (April 30, 2021):

* Fixed minor bugs in the hash functions

Version 0.14 (February 28, 2022):

* Update the code to handle larger log lines and fields 

Version 1.0.0 (March 8, 2022):

* Fixed a compile warning in OS/X

Version 1.0.1 (March 14th, 2022):

* Minor documentation changes and porting

Version 1.0.2 (May 8th, 2023):

* Updated autoconf to address deprecated options

Version 1.0.3 (October 2, 2024):

* Added support for Tom Liston PINEAPPLE mode

Version 1.0.5 (July 24, 2025):

* MAJOR PERFORMANCE OPTIMIZATION RELEASE
* Added fast character classification lookup table for 15-25% parser speedup
* Implemented pre-allocated parser fields eliminating malloc overhead during parsing
* Enhanced memory safety with comprehensive integer overflow protection
* Replaced all character classification functions with fast O(1) lookup macros
* Added extensive function documentation throughout the codebase
* Improved hash table performance with detailed algorithm documentation
* Enhanced copy_argv() with bounds checking to prevent buffer overflows
* Overall performance improvement: 20-35% faster for large log file processing
* Security enhancements prevent buffer overflow vulnerabilities
* Added static analysis support with cppcheck, scan-build, and splint
* Maintains full backward compatibility with existing functionality
